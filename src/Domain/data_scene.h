#pragma once
struct SceneData{
    bool C_RANDOMIZE_START = true;
    bool C_LANDER_COLLISION_COURSE = false;
    float C_GRAVITATIONAL_FORCE_MULTIPLIER = 0.1f;
    float C_LANDER_START_DISTANCE = 500.0f;
    float C_LANDER_PASS_DISTANCE = 50.0f;
    float C_INITIAL_LANDER_SPEED = 2.0f;
    float C_ASTEROID_MAX_ROTATIONAL_VELOCITY = 0.03f;
    float C_ASTEROID_SCALE = 20.0f;

    bool RANDOMIZE_START = C_RANDOMIZE_START;
    bool LANDER_COLLISION_COURSE = C_LANDER_COLLISION_COURSE;
    float GRAVITATIONAL_FORCE_MULTIPLIER = C_GRAVITATIONAL_FORCE_MULTIPLIER;
    float LANDER_START_DISTANCE = C_LANDER_START_DISTANCE;
    float LANDER_PASS_DISTANCE = C_LANDER_PASS_DISTANCE;
    float INITIAL_LANDER_SPEED = C_INITIAL_LANDER_SPEED;
    float ASTEROID_MAX_ROTATIONAL_VELOCITY = C_ASTEROID_MAX_ROTATIONAL_VELOCITY;
    float ASTEROID_SCALE = C_ASTEROID_SCALE;

    void reset(){
        RANDOMIZE_START = C_RANDOMIZE_START;
        LANDER_COLLISION_COURSE = C_LANDER_COLLISION_COURSE;
        GRAVITATIONAL_FORCE_MULTIPLIER = C_GRAVITATIONAL_FORCE_MULTIPLIER;
        LANDER_START_DISTANCE = C_LANDER_START_DISTANCE;
        LANDER_PASS_DISTANCE = C_LANDER_PASS_DISTANCE;
        INITIAL_LANDER_SPEED = C_INITIAL_LANDER_SPEED;
        ASTEROID_MAX_ROTATIONAL_VELOCITY = C_ASTEROID_MAX_ROTATIONAL_VELOCITY;
        ASTEROID_SCALE = C_ASTEROID_SCALE;
    }
};